Linux常用命令

一、命令基本格式：
命令 [选项] [参数]
绝大多数命令格式如上，也有特别的哦！

//查询目录中内容：ls
ls [选项] [文件或目录]

选项：
    -a 显示所有文件，包括隐藏文件（在Linux中.开头的文件为是隐藏文件-->系统文件） 补充： -a就等同于--all(简化选项与完整选项)。                                   
	-l 显示详细信息   如： ls -l(ls --long-list)   【补充说明】：ls -l这个命令就是ll这个命令（ll这个命令其实就是ls -l这个命令的别名）
	       详细信息包含： 10位权限（eg. -rw-r--r--） -表示文件 d表示目录 l表示软连接（即快捷方式）文件。 
		                                        后9位，每3位一组，依次表示文件的所有者u，所属组g和其他人o
												权限： r读 w写 x执行
	                     ls -l /etc/   其中，/etc/代表所带的参数，即操作的对象。   该命令用于看etc这个目录下所有文件的详细信息
						 ls -ld /etc/  该命令用于看etc这个目录本身详细信息
	-d 查看目录属性 如： ls -ld /etc/
	-h 人性化显示文件大小 如： ls -lh  //则文件会显示出以K、M、G这些为单位的大小
	-i 显示inode 如： ls -i  每个文件都有一个id号，系统通过id号来查找文件，判断文件所在位置。


二、文件处理命令
2.1 目录（--->相当于windows中的文件夹）处理命令 & 文件处理命令
    1）建立目录： mkdir
	  mkdir -p [目录名] -p为选项，表示递归创建。递归创建(层级目录结构)即： mkdir -p animal/dog
	  
    2）切换所在目录： cd
	  cd [目录]  
	  如： cd /root/    cd animal/
	  注： Ctrl+L表示清屏。命令行中： cls 或者 clear
	  简化操作如下：
	  cd ~        进入当前用户的家目录
	  cd 回车键    进入当前用户的家目录
	  cd -        进入上次目录
	  cd ..       进入上级目录
	  cd .        进入当前目录（其实没有意义，但是可以执行。进入当前目录就是哪儿也不去，原地不动。）
	  cd /        切换到根目录下
	  
	  补充：
	      相对路径：参照当前所在目录，进行查找。 如： [root@imooc ~]# cd ../usr/local/src/
		  绝对路径：从根目录开始指定，一级一级递归查找。在任何目录下，都能进入指定位置。 如： [root@imooc ~]#cd /etc/
	  注： 在Linux中通过Tab键可以实现命令补全、目录补全。
	
	3）查询所在目录位置： pwd
	4)删除空目录： rmdir---------->不常用
	  rmdir [目录名]  如： rmdir bols/(注意： bols这个目录为空目录) 若命令为： rmdir animal/--->则会报错，因为animal这个目录非空。
	
	5）删除文件或目录： rm
	  rm -rf [文件或目录]  如： rm -rf animal/
	  选项：
	       -r 删除目录
		   -f 强制
    
	6）复制命令： cp
	  cp [选项] [原文件或目录][目标目录]  注意：[目标目录]后面加“/文件名”，则复制时，会把原文件名改成命令中加的“文件名”。若不加“/文件名”，则原文件名不会更改。
	  选项：
	      -r 复制目录                    注意：加-r代表复制目录，不加-r选项代表复制文件
		  -p 连带文件属性复制
		  -d 若原文件是链接文件，则复制链接属性
		  -a 相当于 -pdr                 注意：-a这个选项就相当于上面三个选项的合并，作用是使得目标文件和原文件一模一样（包括属性），完全一样。
	
	7)剪切或改名命令： mv
	  mv [原文件或目录] [目标目录]        注意：这个mv命令在剪切文件夹（即目录）或者文件的时候，都不需要加选项。--->这一点却别与复制命令cp哦！
	  改名： 意思是如果原文件和目标文件在同一文件夹下，那执行mv命令就是改名。 如果不在同一目录（即文件夹）下，执行mv命令就是剪切。
	  

2.2 链接命令	
    链接命令： ln
	ln -s [原文件] [目标文件]    //作用：把原文件生成一个链接的目标文件。  
	
	注意：使用链接命令ln的时候，原文件和目标文件在同一文件夹中，则不用写原文件的绝对路径，若不在同一文件夹中，则原文件路径必须写绝对路径。
	
	选项：
	     -s 创建软链接  注： 创建硬链接则不需要加选项：-s
	硬链接特征：   不建议大家创建硬链接。
	          拥有相同的i节点和block块，可以看成同一个文件。通过i节点识别。
			  不能跨分区。
			  不能针对目录使用（即只有文件才能创建硬链接）。  
	软连接特征：    建议大家使用。
	          类似windows中的快捷方式。
			  拥有自己的i节点和block块,但是数据块中存储的不是实际的文件数据而是原文件的i节点号和文件名。
			  原文件删除，则软链接文件不能使用了。
			  修改任意文件，另一个文件也会相应改变。

	
三、文件搜索命令
3.1 文件搜索命令：locate   最大的好处：搜索速度非常快（相比find命令）。缺点是：只可以按照文件名进行搜索。
    locate命令搜索时是根据/etc/updatedb.conf文件中的配置进行搜索。
    命令格式：
	locate 文件名      #在后台数据库（即/var/lib/mlocate）中按文件名搜索，搜索速度更快。  注意：locate命令搜索的地方是/var/lib/mlocate
	/var/lib/mlocate  #locate命令所搜索的后台数据库。   
	注意：这个后台数据库是每天更新而不是时时更新，但是我们可以使用updatedb命令，进行强制（实时）更新。
	注意： 命令中的mlocate，可能会根据linux系统不同而不同的哦。
	updatedb          #更新数据库     

3.2 命令的搜索命令：whereis和which
    搜索命令的命令：whereis
	命令格式：
	whereis 命令名   #搜索系统命令所在路径及帮助文档所在位置
	选项：
	    -b 只查找可执行文件
		-m 只查找帮助文件
	如： whereis ls   whereis -m ls
		
	搜索命令的命令：which
	命令格式：
	which 文件名     #搜索命令所在路径(即命令所在位置->可以使用该命令的地方)及别名
	如： which ls（ls的别名是ls --color=auto）
	
3.3文件搜索命令:find
   命令格式：
   find [搜索范围] [搜索条件]  #搜索文件
   如： find / -name abc.txt   #其中abc.txt是文件名
   注意： 避免大范围搜索，会非常耗费系统的资源。
         find是在系统当中搜索符合条件的文件名。
		 如果需要匹配(即模糊查询)，使用通配符（如： *、[]、？【这些通配符的含义同正则里的意思】）匹配，通配符是完全匹配。注：使用通配符时要用双引号，引起来。
		 如： find /root -name "ab[cd]"
		 
	find /root -iname abc.txt  #不区分大小写
	find /root -user root      #按照所有者搜索
	find /root -nouser         #查找没有所有者的文件
	
	find /var/log/ -mtime +10  #查找10天前修改的文件
	或者：   find /var/log -mtime +10  #查找10天前修改的文件
	详细解释：
	        -10 10天内修改文件
			10  10天当中修改的文件
			+10 10天前修改的文件
			
			atime 文件访问时间
			ctime 修改文件属性
			mtime 修改文件内容
			
	find . -size 25k           #查找文件大小是25KB的文件
	或者：  find . -size 25k    #查找文件大小是25KB的文件（其中.代表当前目录）
	注意：find命令搜索千字节时，k为小写，搜索兆字节，M为大写。
	详细解释：
	        -25k   小于25KB的文件
			25k    等于25KB的文件
			+25k  大于25KB的文件
			
	find . inum 262422         #查找i节点是262422的文件
	
	//多条件查询
	find /etc -size +20k -a -size -50k  #查找/etc/目录下，大于20KB并且小于50KB的文件
	其中： -a and 逻辑与，两个条件都满足
	      -o or  逻辑或，两个条件满足一个即可
	
	find /etc -size +20k -a -size -50k -exec ls -lh {} \;  #查找/etc/目录下，大于20KB并且小于50KB的文件，并显示详细信息
	                                                       #-exec/-ok 命令 {} \;  对搜索结果执行操作
	注意： find /etc -size +20k -a -size -50k为命令1
	      ls -lh为命令2
		  -exec {} \; 用了-exec，则必须使用{} \;
		  命令2是执行命令1的结果，即将命令1的结果作为命令2的操作对象。
	
3.4字符串搜索命令:grep 以及find命令与grep命令的区别
   搜索字符串命令：grep
   命令格式：
   grep [选项] 字符串 文件名   #在文件当中匹配符合条件的字符串
   选项：
       -i 忽略大小写
	   -v 排除指定字符串
	   
	如： grep "size" anaconda-ks.cfg
	    grep -v "size" anaconda-ks.cfg
		
    Linux系统是严格区分大小写的哦！
	
	find命令与grep命令的区别：
	find命令：在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符（*、？、[]）匹配，通配符是完全匹配（一模一样）。
	grep命令：在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式进行匹配，正则表达式是包含匹配（包含）。
	    
    
四、帮助命令
4.1帮助命令man
   命令格式：
   man 命令   #获取指定命令的帮助
   如： man ls      #查看ls的帮助
       man  man    #查看man的帮助
	   
    注意： man一共有8或者9个级别。
	
	查看命令拥有哪个级别的帮助：
	man -f 命令   相当于 whatis 命令     #查看命令是干什么用的。
	如： man -f ls
	    man -f passwd
		
	如： man -5 passwd  or man 5 passwd 
	    man -4 null    or man 4 null
		man -8 ifconfig or  man ifconfig   #因为ifconfig这个命令只有8等级，所以不打8，直接man ifconfig,回车后，显示的信息同man 8 ifconfig一样。
		
	查看和命令相关的所有帮助：
	man -k 命令  相当于 apropos 命令  #可以看到所有包含有命令（关键字）的帮助信息（可能是帮助文档，可能是命令）
	如： apropos passwd
	
4.2其他帮助命令
   获取选项帮助：
   命令格式： 
           命令  --help  #获取命令选项的帮助
	       如： ls --help

	shell内部命令帮助：    补充说明一下何为shell?------->其实shell就相当于windows中的图形用户界面，是用户与计算机交互的接口。
	命令格式：
	       help shell内部命令   #获取shell内部命令的帮助
		   如： whereis cd       #确定cd是否是shell内部命令(其实cd就是shell内部命令，而ls不是，ls是外部命令，别人写好的。)
		                        #如果whereis命令找不到可执行文件，则命令就是shell内部命令。
		       help cd          #获取内部命令帮助
			   
	详细命令帮助： info
	命令格式： 
	        info 命令  #显示的是一个庞大的命令信息，以1.1 1.2  2.1  2.2  2.3 3.1 3.2...这样的形式罗列。
		  如： 按 回车键  #进入子帮助页面（带有*号标记）
		      按 u键     #进入上层页面
			  按 n键     #进入下一个帮助节点
			  按 p键     #进入上一个帮助节点
			  按 q键     #退出
		 

五、压缩与解压命令
常用压缩格式： .zip     .gz     .bz2  .rar（Windows中的，Linux中不能解压缩） .7z 
常用压缩格式： .tar.gz  .tar.bz2

//.zip     .gz     .bz2  
.zip格式压缩: 
    命令格式：
            zip 压缩文件名 源文件        #压缩文件
			友情提醒： 压缩文件名--->自定义，虽然Linux系统不区分扩展名，所以压缩文件名起的时候可以不加".zip"，但是我们自己最好还是加上.zip，方便自己识别。
			
			zip -r 压缩文件名 源目录     #压缩目录
.zip格式解压缩: 
    命令格式：
            unzip 压缩文件               #解压缩.zip文件或者.zip目录（压缩包会保留）
			注: 这条命令在windows中也是生效的哦。
    
.gz格式压缩: 
    命令格式：
            gzip 源文件                  #压缩为.gz格式的压缩文件，源文件会消失
			
			gzip -c 源文件 > 压缩文件     #压缩为.gz格式，源文件保留(其中，压缩文件名自己定义，扩展名一般自己要手动加上： .gz)
			如： gzip -c abc > abc.gz
			注： “>”的作用是把命令（>左边）的结果写入文件（>右边）中。
			
			gzip -r 目录                 #压缩目录下所以的子文件，但是不能压缩目录
			
.gz格式解压缩: 
    命令格式：
            gzip -d 压缩文件             #解压缩文件（压缩包不会保留）
			gunzip  压缩文件             #解压缩文件（压缩包不会保留）
			gunzip -r 目录               #解压缩目录下所以的子文件，但是不能解压缩目录（压缩包不会保留）

			
.bz2 格式压缩: 
    命令格式：
            bzip2 源文件                  #压缩为.bz2格式，不保留源文件
			bzip2 -k 源文件               #压缩之后保留源文件
			注意： bzip2命令不能压缩目录
						
.bz2格式解压缩: 
    命令格式：
            bzip2 -d 压缩文件             #解压缩，-k保留压缩文件（压缩包不会保留）
			bunzip2  压缩文件             #解压缩，-k保留压缩文件（压缩包不会保留）
			
//.tar.gz  .tar.bz2
打包命令:tar
    命令格式：
	        tar -cvf 打包文件名 源文件
	选项：
	    -c 打包
		-v 显示过程
		-f 指定打包后的文件名
	如： tar -cvf jp.tar jp  #jp.tar是指定打包后的文件名（自定义），记得最好加上扩展名哦。
	    这样打包后，可以执行： gzip jp.tar               #压缩成.gz（不保留源文件）
		                    gzip -d jp.tar.gz         #解压缩（不保留压缩文件）
							bzip2 jp.tar              #压缩成.bzip2（不保留源文件）
							bzip2 -d jp.tar.bz2       #解压缩（不保留压缩文件）						
							从而解决gzip和bzip2命令不能压缩目录的问题

解打包命令:tar
    命令格式：
	        tar -xvf 打包文件名
	选项：
	    -x 解打包
    如： tar -xvf cangls.tar
	
.tar.gz--->更方便的命令：
其实.tar.gz格式是先打包为.tar格式，再压缩为.gz格式压缩：
    命令格式：
	        tar -zcvf 压缩包名.tar.gz 源文件
			如： tar -zcvf jp.tar.gz jp
	选项：
	    -z 压缩为.tar.gz格式
	命令格式：
	        tar -zxvf 压缩包名.tar.gz
			如： tar -zxvf jp.tar.gz
	选项：
	    -x 解压缩为.tar.gz格式

同样地：		
.tar.bz2格式是先打包为.tar格式，再压缩为.bz2格式压缩：
    命令格式：
	        tar -jcvf 压缩包名.tar.bz2 源文件
			如： tar -jcvf jp.tar.bz2 jp
	选项：
	    -j 压缩为.tar.bz2格式
	命令格式：
	        tar -jxvf 压缩包名.tar.bz2
			如： tar -jxvf jp.tar.bz2 -C /tmp/  #解压到tmp目录下，其中“-C”是为了指定解压缩位置，而且，-C只能用在-jxcf这个命令里。
	选项：
	    -x 解压缩为.tar.bz2格式
		
扩展：
压缩多个文件：   tar -zcvf test.tar.gz jp abc.txt       #压缩多个文件是，用空格就好。（jp是目录名，abc.txt是文件名）
               tar -zcvf /tmp/test.tar.gz jp abc.txt  #压缩到tmp目录下。
解压多个文件：   tar -zxvf test.tar.gz                  #解压
         注：   tar -ztvf test.tar.gz                  #只是查看压缩包中的内容，但是不解压
					

六、关机和重启命令
6.1 shutdown命令
    命令格式： 
	        shutdown [选项] 时间
	选项：
	    -c 取消前一个关机命令
		-h 关机
		-r 重启
	时间： 如： now   #使用date命令可以查看时间（即敲打： date）
	如：
	   shutdown -r now     #立即关机重启
	   shutdown -r 05:30   #5点半的时候重启  注意： 回车后，停留shell界面，什么也干不了。需要按Ctrl+c才能退出，回到shell界面。
	   shutdown -r 05:30 & #使得鼠标可以回到命令行中，而不是停留shell界面，什么也干不了
	   shutdown -c         #撤销上一个关机命令：shutdown -r 05:30 &

6.2 其他关机命令(以下3条，但是这三条相比shutdown  不太安全。所以用的时候，还是选择shutdown)
    halt
	poweroff
	init 0   #0 表示系统运行级别
	
6.3 其他重启命令
    reboot
	init 6   #6 表示系统运行级别
补充说明： 
	    系统运行级别： 
			        0 关机
					1 用户
					2 不完全多用户，不含NFS服务
					3 完全多用户（字符界面）
					4 未分配
					5 图形界面
					6 重启
		
		runlevel          #查询系统运行级别  注： 会显示上一个级别和当前运行的级别  如： N 3 --->其中：N表示null,3表示字符界面
		cat /etc/inittab  #修改系统默认运行级别  系统默认运行级别---->id：3initdefault:
		
		注： 在Linux系统中，使用X(大写)表示图形界面。
		
6.4 退出登录命令： logout（相当于windows中的注销）
	                      
						  
七、其他常用命令
1、挂载命令：   ----------->一般不要随便改动！！！！！！
  查询与自动挂载：
                mount       #查询系统中已经挂载的设备
				mount -a    #依据配置文件/etc/fstab的内容，自动挂载
2、挂载命令格式：
              mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点    
			  注： Linux中的挂载点（在Linux中使用已经存在的空白目录作为挂载点的）其实就是windows中的盘符。设备文件都存储在/dev/目录下。
	  选项：
	      -t 文件系统  加入文件系统类型来指定挂载的类型，可以是ext3、ext4、iso9660（光盘默认文件系统是iso9660）等文件系统
		  -o 特殊选项  可以指定挂载的额外选项
	  如： [root@localhost ~]#mount -o remount,noexec /home   #重新挂载/home分区，并使用noexec权限(不执行文件)  
	      注意： 上一句命令省略了"设备文件名"，是因为系统已经自动挂载好了home分区--->/dev/sda2 on home type ext4 (rw)
	      [root@localhost sh]#cd home   
	      [root@localhost home]#vi hello.sh  
	      [root@localhost home]#chmod 755 hello.sh  
	      [root@localhost home]#./hello.sh  
	      [root@localhost home]#mount -o remount,exec /home  #(执行文件)
	  
友情扩展： #！/bin/bash           #这句code，在纯Linux脚本中可省，但是Linux复杂脚本中可以嵌套其他语言时，必须加上这一句开头。
          chmod 755 hello.sh    #这句命令用于赋予一个脚本（hello.sh）执行权限。
		  ./hello.sh            #./(相对路径)加上脚本文件名，就可以执行脚本。（其实找到hello.sh这个脚本所在位置就好。  ./代表当前目录下）
	
3、挂载光盘：
          [root@localhost ~]#mkdir /mnt/cdrom/                           #建立挂载点
          [root@localhost ~]#mount -t iso9660 /dev/sr0 /mnt/cdrom/       #挂载光盘(/dev/sr0是设备文件名，/mnt/cdrom/是挂载点)
          或者这么写： [root@localhost ~]#mount -t iso9660 /dev/cdrom /mnt/cdrom/       #挂载光盘(sr0是cdrom的软连接，建议使用软连接)
          又或者这么写： [root@localhost ~]#mount /dev/sr0 /mnt/cdrom/          #挂载光盘(省略-t iso9660,因为系统默认是知道光盘的文件系统是iso9660)
		  注意： 光盘只能读，不能写哦，而默认挂载时就是rw权限。
4、卸载命令：
   Linux中，用完光盘（u盘，移动硬盘），怎么取出？	----------->使用卸载命令，才能取出光盘（u盘...）。
          [root@localhost ~]#umount 设备文件名或挂载点
		  如： 
          [root@localhost ~]#umount /mnt/cdrom          #(挂载点)
		  注意： 先退出目录位置，再卸载。
		  或者： [root@localhost ~]#umount /dev/sr0      #(设备文件名)
5、挂载U盘：
    	 [root@localhost ~]#fdisk -l    #查看U盘设备文件名（因为U盘的命令是不确定的，所以先用fdisk -l查看下系统中已经识别的硬盘）
    	 [root@localhost ~]#mount -t vfat /dev/sdb1 /mnt/usb  #U盘一般是sdb1，当然也有其他可能
		 注意： Linux默认是不支持NTFS文件系统的。(即移动硬盘是不能直接挂载在Linux中的)
		 

2、用户登录查看和用户交互命令：
用户登录查看命令：
    命令格式： 
	        w 用户名  #查看登录用户信息
	        w         #查看系统中的登录信息
	        who 用户名    #查看登录用户信息
			          该命令输出（列表）如下：
					               用户名 登录终端 登录时间（登录来源IP地址）
			
			last       #查询当前登录和过去登录的用户信息
			   注意： last命令默认是读取/var/log/wtmp文件数据（用vi /var/log/wtmp命令查看文件内容的话，则显示乱码）
			   命令输出：
			           用户名 登陆终端 登陆IP 登录时间 退出时间（在线时间）
			
			lastlog    #查看所有用户的最后一次登录时间
			       注意： lastlog命令默认是读取/var/log/lastlog文件内容
				   命令输出： 
				           用户名 登录终端 登录IP 最后一次登录时间